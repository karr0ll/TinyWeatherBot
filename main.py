import os

import telebot
from telebot import types

from dotenv import load_dotenv

from handlers.dadata_api_handler import DadataAPIHandler
from handlers.file_handler import FileHandler
from handlers.weather_api_handler import WeatherAPIHandler

load_dotenv()
TG_TOKEN: str = os.environ.get("TG_TOKEN")

bot = telebot.TeleBot(TG_TOKEN)


@bot.message_handler(commands=["start"])
@bot.message_handler(
    func=lambda message: message.text == '‚óÄÔ∏è–ù–∞–∑–∞–¥',
    content_types=['text']
)
def ask_for_location(message: object) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Ä–∞—Å—à–∞—Ä–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ü–æ—Å–ª–µ —á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ json:
    id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —à–∏—Ä–æ—Ç—É, –¥–æ–ª–≥–æ—Ç—É, —Ç–∏–ø –≥–æ—Ä–æ–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    :param message: –æ–±—ä–µ–∫—Ç Message telegram API
    :type message: object
    """
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
    )
    share_location_button = types.KeyboardButton(
        text="üìç–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
        request_location=True
    )
    keyboard.add(share_location_button)
    bot.send_message(
        message.from_user.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞",
        reply_markup=keyboard
    )


@bot.message_handler(content_types=['location'])
@bot.message_handler(
    func=lambda message: message.text == '‚óÄÔ∏è–ù–∞–∑–∞–¥',
    content_types=['text']
)
def process_location(message: object) -> None:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON.
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —Ç–∏–ø–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    :param message: –æ–±—ä–µ–∫—Ç Message telegram API
    :type message: object
    """
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª
    user_id = message.from_user.id
    lat: float = message.location.latitude
    lon: float = message.location.longitude

    city_data_api_handler = DadataAPIHandler(lat=lat, lon=lon)
    city_data = city_data_api_handler.get_city_data_by_coords()
    city_type = city_data[0]["data"]["region_type"]
    city_name = city_data[0]["data"]["region"]

    filehandler = FileHandler()
    if os.path.exists("chat_data.json") is False or os.stat("chat_data.json").st_size == 0:
        filehandler.save_chat_data_to_json(user_id, lat, lon, city_type, city_name)
    else:
        filehandler.update_chat_data_in_json(user_id, lat, lon, city_type, city_name)

    # –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    requests_for_current_weather_button = types.KeyboardButton(
        text="‚òÄÔ∏è–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"
    )
    request_forecast_button = types.KeyboardButton(
        text="‚è∞–ü—Ä–æ–≥–Ω–æ–∑"
    )
    back_button = types.KeyboardButton(
        text='‚óÄÔ∏è–ù–∞–∑–∞–¥'
    )

    keyboard.add(
        requests_for_current_weather_button,
        request_forecast_button
    )
    keyboard.add(back_button)

    bot.send_message(
        message.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞",
        reply_markup=keyboard
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
@bot.message_handler(
    func=lambda message: message.text == "‚òÄÔ∏è–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å",
    content_types=['text']
)
def send_current_weather_by_coords(message: object) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –æ–±—ä–µ–∫—Ç Message telegram API
    :type message: object
    """
    filehandler = FileHandler()
    data = filehandler.load_data_from_json()
    if message.from_user.id == data[0]['user_id']:
        lat = data[0]['lat']
        lon = data[0]['lon']
        city_type = data[0]['city_type']
        city_name = data[0]['city_name']

        weather_api_handler = WeatherAPIHandler(lat, lon)
        weather_data = weather_api_handler.get_current_weather()
        temperature: int = int(
            round(
                weather_data["main"]["temp"], 0
            )
        )
        feels_like: int = int(
            round(
                weather_data["main"]["feels_like"], 0
            )
        )
        weather_condition = weather_data["weather"][0]["description"]
        weather_condition_icon = weather_api_handler.get_weather_icon()

        reply = f"–ü–æ–≥–æ–¥–∞ –≤ {city_type}.{city_name} —Å–µ–π—á–∞—Å:\n" \
                f"{weather_condition_icon}{weather_condition.capitalize()}\n" \
                f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </b>{temperature}¬∞C\n" \
                f"<b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: </b>{feels_like}¬∞C"

        bot.send_message(message.from_user.id, reply, parse_mode="html")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥–Ω–æ–∑", –≤—ã–≤–æ–¥ –ø—Ä–µ–ª–æ–∂–µ–Ω–∏–π –ø–æ —Å—Ä–æ–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
@bot.message_handler(
    func=lambda message: message.text == '‚è∞–ü—Ä–æ–≥–Ω–æ–∑',
    content_types=['text']
)
def suggest_forecast_duration(message: object) -> None:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å—Ä–æ–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
    :param message: –æ–±—ä–µ–∫—Ç Message telegram API
    :type message: object
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    request_3h_forecast_button = types.KeyboardButton(text="üïí3 —á–∞—Å–∞")
    request_6h_forecast_button = types.KeyboardButton(text="üïï6 —á–∞—Å–æ–≤")
    request_12h_forecast_button = types.KeyboardButton(text="üïõ12 —á–∞—Å–æ–≤")
    request_tomorrow_forecast_button = types.KeyboardButton(text="üïê–ó–∞–≤—Ç—Ä–∞")
    request_after_tomorrow_forecast_button = types.KeyboardButton(text="üïê–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")
    back_button = types.KeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥")

    keyboard.add(
        request_3h_forecast_button,
        request_6h_forecast_button,
        request_12h_forecast_button,
        request_tomorrow_forecast_button,
        request_after_tomorrow_forecast_button,
    )
    keyboard.add(back_button)
    bot.send_message(
        message.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞",
        reply_markup=keyboard
    )


@bot.message_handler(
    func=lambda message: message.text in [
        "üïí3 —á–∞—Å–∞",
        "üïï6 —á–∞—Å–æ–≤",
        "üïõ12 —á–∞—Å–æ–≤",
        "üïê–ó–∞–≤—Ç—Ä–∞",
        "üïê–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"
    ],
    content_types=['text']
)
def send_forecast(message: object) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.
    :param message: –æ–±—ä–µ–∫—Ç Message telegram API
    :type message: object
    """
    filehandler = FileHandler()
    data = filehandler.load_data_from_json()
    if message.from_user.id == data[0]['user_id']:
        lat = data[0]['lat']
        lon = data[0]['lon']
        city_type = data[0]['city_type']
        city_name = data[0]['city_name']
    forecast_handler = WeatherAPIHandler(lat, lon)
    forecasts_data = forecast_handler.get_forecast()

    match message.text:
        case "üïí3 —á–∞—Å–∞":
            forecast_time = 3 * 60 * 60
        case "üïï6 —á–∞—Å–æ–≤":
            forecast_time = 6 * 60 * 60
        case "üïõ12 —á–∞—Å–æ–≤":
            forecast_time = 12 * 60 * 60
        case "üïê–ó–∞–≤—Ç—Ä–∞":
            forecast_time = 24 * 60 * 60
        case "üïê–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
            forecast_time = 72 * 60 * 60

    utc_offset = forecasts_data["city"]["timezone"]
    forecast_target_time = message.date + forecast_time + utc_offset


    for i, item in enumerate(forecasts_data["list"]):
        if forecasts_data["list"][i]["dt"] < forecast_target_time < forecasts_data["list"][i + 1]["dt"]:
            temperature = int(
                round(
                    forecasts_data["list"][i]["main"]["temp"], 0
                )
            )
            feels_like = int(
                round(
                    forecasts_data["list"][i]["main"]["feels_like"], 0
                )
            )
            weather_condition = forecasts_data["list"][i]["weather"][0]["description"]
            weather_condition_icon = forecast_handler.get_weather_icon()

    reply = f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ {city_type}.{city_name}:\n" \
            f"{weather_condition_icon}{weather_condition.capitalize()}\n" \
            f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </b>{temperature}¬∞C\n" \
            f"<b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: </b>{feels_like}¬∞C\n" \

    bot.send_message(message.from_user.id, reply, parse_mode="html")


# # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
# @bot.message_handler(
#     func=lambda message: message.text not in ['‚è∞–ü—Ä–æ–≥–Ω–æ–∑', '‚óÄÔ∏è–ù–∞–∑–∞–¥'],
#     content_types=['text']
# )
# def send_current_weather_by_city(message):
#         city = message.text.capitalize()
#         city_data_api_handler = DadataAPIHandler(city=city)
#         city_coords = city_data_api_handler.get_coords_by_city()
#         if city_coords["result"] is None:
#             bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
#         else:
#             lat = city_coords["geo_lat"]
#             lon = city_coords["geo_lon"]
#             city_type = city_coords["region_type"]
#             city_name = city_coords["region"]
#
#             weather_api_handler = WeatherAPIHandler(lat, lon)
#             weather_data = weather_api_handler.get_current_weather()
#             temperature: int = int(round(weather_data["main"]["temp"], 0))
#             feels_like: int = int(round(weather_data["main"]["feels_like"], 0))
#             weather_condition = weather_data["weather"][0]["description"]
#             weather_condition_icon = weather_api_handler.get_weather_icon()
#
#             reply = f"–ü–æ–≥–æ–¥–∞ –≤ {city_type}.{city_name} —Å–µ–π—á–∞—Å:\n" \
#                     f"{weather_condition_icon}{weather_condition.capitalize()}\n" \
#                     f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </b>{temperature}¬∞C\n" \
#                     f"<b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: </b>{feels_like}¬∞C"
#
#         return bot.send_message(message.from_user.id, reply, parse_mode="html")


if __name__ == "__main__":
    bot.infinity_polling()
