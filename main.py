import os

import telebot
from telebot import types

from dotenv import load_dotenv

from api_handlers.dadata_api_handler import DadataAPIHandler
from api_handlers.weather_api_handler import WeatherAPIHandler

load_dotenv()
TG_TOKEN: str = os.environ.get("TG_TOKEN")

bot = telebot.TeleBot(TG_TOKEN)
user_shared_location = []

#–≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=["start"])
@bot.message_handler(
    func=lambda message: message.text == '‚óÄÔ∏è–ù–∞–∑–∞–¥',
    content_types=['text']
)
def ask_for_location(message):
    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞"
    )
    share_location_button = types.KeyboardButton(
        text="üìç–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º",
        request_location=True
    )
    request_forecast_button = types.KeyboardButton(
        text="‚è∞–ü—Ä–æ–≥–Ω–æ–∑"
    )
    keyboard.add(share_location_button, request_forecast_button)
    bot.send_message(
        message.from_user.id,
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞",
        reply_markup=keyboard
    )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≥–Ω–æ–∑", –≤—ã–≤–æ–¥ –ø—Ä–µ–ª–æ–∂–µ–Ω–∏–π –ø–æ —Å—Ä–æ–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞
@bot.message_handler(
    func=lambda message: message.text == '‚è∞–ü—Ä–æ–≥–Ω–æ–∑',
    content_types=['text']
)
def suggest_forecast_duration(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    request_3h_forecast_button = types.KeyboardButton(text="üïí3 —á–∞—Å–∞")
    request_6h_forecast_button = types.KeyboardButton(text="üïï6 —á–∞—Å–æ–≤")
    request_12h_forecast_button = types.KeyboardButton(text="üïõ12 —á–∞—Å–æ–≤")
    request_tomorrow_forecast_button = types.KeyboardButton(text="üïê–ó–∞–≤—Ç—Ä–∞")
    request_after_tomorrow_forecast_button = types.KeyboardButton(text="üïê–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞")
    back_button = types.KeyboardButton(text="‚óÄÔ∏è–ù–∞–∑–∞–¥")

    keyboard.add(
        request_3h_forecast_button,
        request_6h_forecast_button,
        request_12h_forecast_button,
        request_tomorrow_forecast_button,
        request_after_tomorrow_forecast_button,
        back_button
    )
    bot.send_message(
        message.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞",
        reply_markup=keyboard
    )

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "üìç–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º"
@bot.message_handler(content_types=['location'])
def send_current_weather_by_coords(message):
        lat: float = message.location.latitude
        lon: float = message.location.longitude

        weather_api_handler = WeatherAPIHandler(lat, lon)
        weather_data = weather_api_handler.get_current_weather()

        city_data_api_handler = DadataAPIHandler(lat=lat, lon=lon)
        city_data = city_data_api_handler.get_city_data_by_coords()

        temperature: int = int(round(weather_data["main"]["temp"], 0))
        feels_like: int = int(round(weather_data["main"]["feels_like"], 0))
        weather_condition = weather_data["weather"][0]["description"]
        weather_condition_icon = weather_api_handler.get_weather_icon()

        city_type = city_data[0]["data"]["region_type"]
        city_name = city_data[0]["data"]["region"]

        reply = f"–ü–æ–≥–æ–¥–∞ –≤ {city_type}.{city_name} —Å–µ–π—á–∞—Å:\n"\
                f"{weather_condition_icon}{weather_condition.capitalize()}\n"\
                f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </b>{temperature}¬∞C\n" \
                f"<b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: </b>{feels_like}¬∞C"

        return bot.send_message(message.from_user.id, reply, parse_mode="html")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
@bot.message_handler(
    func=lambda message: message.text not in ['‚è∞–ü—Ä–æ–≥–Ω–æ–∑', '‚óÄÔ∏è–ù–∞–∑–∞–¥'],
    content_types=['text']
)
def send_current_weather_by_city(message):
        city = message.text.capitalize()
        city_data_api_handler = DadataAPIHandler(city=city)
        city_coords = city_data_api_handler.get_coords_by_city()
        if city_coords["result"] is None:
            return bot.send_message(message.from_user.id, "–¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            lat = city_coords["geo_lat"]
            lon = city_coords["geo_lon"]
            city_type = city_coords["region_type"]
            city_name = city_coords["region"]

            weather_api_handler = WeatherAPIHandler(lat, lon)
            weather_data = weather_api_handler.get_current_weather()
            temperature: int = int(round(weather_data["main"]["temp"], 0))
            feels_like: int = int(round(weather_data["main"]["feels_like"], 0))
            weather_condition = weather_data["weather"][0]["description"]
            weather_condition_icon = weather_api_handler.get_weather_icon()

            reply = f"–ü–æ–≥–æ–¥–∞ –≤ {city_type}.{city_name} —Å–µ–π—á–∞—Å:\n" \
                    f"{weather_condition_icon}{weather_condition.capitalize()}\n" \
                    f"<b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: </b>{temperature}¬∞C\n" \
                    f"<b>–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: </b>{feels_like}¬∞C"

        return bot.send_message(message.from_user.id, reply, parse_mode="html")





if __name__ == "__main__":
    bot.infinity_polling()
